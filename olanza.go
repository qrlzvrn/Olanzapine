package main

import (
	"log"
	"os"

	"github.com/urfave/cli"

	_ "github.com/jackc/pgx/v4"
)

//Структура, в которую считываются данные введенные пользователем при добавлении новой задачи
type task struct {
	id       int
	content  string
	complete bool
	category string
	deadline string
}

var table = `
CREATE TABLE task (
	id SERIAL,
	content TEXT NOT NULL,
	complete BOOLEAN,
	category VARCHAR,
	deadline DATE
)`

func main() {
	app := &cli.App{
		Name:  "olanza",
		Usage: "Wait a minute",
		Commands: []*cli.Command{
			{
				Name:  "add",
				Usage: "",
				//Flags: ,
				//Action: ,
				//считываем данные с флагов в экземпляр структуры
				//открывем соединение с бд
				//помещаем полуившиеся поля структуры в запрос к базе
				//сообщаем пользователю, что задача добавлена, если не было выброшено ни одной ошибки
				//закрываем соединение с базой
			},
			{
				Name:  "complete",
				Usage: "",
				//Action: ,
				//считывем id задачи, которую нужно завершить
				//открывем соединение с бд
				//апдейтим значение complete у нужной задачи
				//если задача не найдена, бросаем ошибку
				//елси ошибок нет, то сообщаем о том, что задача выполнена
				//закрываем соединение с бд
			},
			{
				Name:  "delete",
				Usage: "",
				//Action: ,
				//открываем бд
				//находим все задачи с complete=true и удаляем их
				//Успешно - сообщаем пользователю и закрываем соединение с базой
			},
			{
				Name:  "init",
				Usage: "",
				//Action: ,
				//проверяем существование бд
				//Если все в порядке, то создаем таблицу
				//иначе выбрасываем ошибку и сообщаем пользователю, что базы данных не существует и ее нужно создать
				//закрываем соединение с бд

			},
			{
				Name:    "list",
				Aliases: []string{"s"},
				Usage:   "",
				//Action: ,
				//если пользователь вводит еще и категорию, то выводим только подходящие
				//если не введено ничего, то выводим все задачи
				//если получаем ключ --all/-a, то выводим даже выполненные задачи
				//открывем базу; делаем SELECT, считвыаем все в [][]string
				//строим из этих данных таблицу, что бы все аккуратно выводилось в консоль
				//закрываем соединение с бд
			},
		},
	}
	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
